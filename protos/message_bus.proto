syntax = "proto3";

service GameUpdates {
  rpc Play(PlayRequest) returns (PlayingClient) {}
  rpc SubscribeGameStates(PlayingClient) returns (stream GameStateEvent) {}
  rpc PlayingClientSync(stream PlayingClientEvent) returns (Empty) {}
}

message Empty {}

message PlayRequest {
  string levelName = 1;
}

message GameStateEvent {
  // TODO: possibly needs id and timestamp
  PackedGameState gameState = 1;
}

message PackedGameState {
  repeated PackedPlayerModel players = 1;
}

message PlayingClient {
  uint32 gameID = 1;
  uint32 clientID = 2;
  PackedArena arena = 3;
}

message PackedArena {
  repeated PackedTilePosition floorTiles = 1;
  repeated PackedTilePosition walls = 2;
  // Note: may pack those into one uint32 in the future
  uint32 nrows = 3;
  uint32 ncols = 4;
}

message PlayingClientEvent {
  PlayingClient client = 1;
  PlayerInputs playerInputs = 2;
}

message PlayerInputs {
  uint32 pressedKeys = 1;
}

// flags least to most significant bits
//  - appliedThrust
message PackedPlayerModel {
  uint32 id = 1;
  PackedTilePosition tilePosition = 2;
  PackedFractionalPoint velocity = 3;
  DoubleFourDecimals angle = 4;
  uint32 flags = 5;
}

// colRow: tile column and row
// relXY:  integer representation of offset from tile center
//   Example: relX: 1.233 -> x = floor(1.233* 1000)
message PackedTilePosition {
  PackedPoint colRow = 1;
  PackedFractionalPoint relXY = 2;
}

// A PackedOffset packs signed x:double + y:double information
// into one int32.
// The upper 16 bits are x/col and the lower 16 bits are y/row.
message PackedFractionalPoint {
  uint32 xy = 1;
}

// A PackedPoint packs unsigned x:int + y:int information
// into one int32.
// The upper 16 bits are x and the lower 16 bits are y.
message PackedPoint {
  uint32 xy = 1;
}

message DoubleTwoDecimals {
  int32 value = 1;
}

message DoubleFourDecimals {
  int32 value = 1;
}
