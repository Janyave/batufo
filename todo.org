#+TITLE: batufo

* Building a 2D Multiplayer Game from Scratch in #Flutter

hacking on a multiplayer Flutter game in Emacs

* Networking

** Socket.io Spike [0/0]
:LOGBOOK:
CLOCK: [2020-05-20 Wed 18:41]--[2020-05-20 Wed 19:42] =>  1:01
CLOCK: [2020-05-15 Fri 18:40]--[2020-05-15 Fri 20:17] =>  1:37
CLOCK: [2020-05-14 Thu 18:40]--[2020-05-14 Thu 20:20] =>  1:40
:END:

- [X] setup TS project
- [X] simple socket.io server in TypeScript
- [X] write commandline socket.io dart client
  - [X] [[*Try possible fixes][Try possible fixes]]
- [X] communicate between the two
- [X] find proto lib for JS/TS
- [X] write proto generator script
- [X] communicate proto messages and declare it impossible for now

*** Status

- communicating between server and client, but dart client is unable to deserialize message
- Node.js server + client class have static ~(de)serialize~ methods, but dart classes don't
- also data received is not a ~List~ either
- possibly include a string in the payload to understand data format better

  
** KILL Using JSON format
:LOGBOOK:
CLOCK: [2020-05-20 Wed 19:51]--[2020-05-20 Wed 20:11] =>  0:20
:END:

No longer necessary since we figured out how to work around the dart socket.io lib treating all incoming messages as JSON.
This allows us to use proto definitions and smaller /albeit not ideal/ payloads (due to the workaround).
  
- [X] ensure this works
- [ ] declare TypeScript payload types only for play request for now
- [ ] determine small format to send, most likely flat arrays
  
** PlayerRequest -> PlayingClient Init
:LOGBOOK:
CLOCK: [2020-05-21 Thu 18:37]--[2020-05-21 Thu 19:42] =>  1:05
:END:
  
- [X] send play request to server including desired level
- [X] port tilemap creation from dart to typescript
- [ ] port arena creation from dart to typescript in order to build arena on the server
- [ ] server reponds with ids + arena
- [ ] client prints out arena info
  
** TODO Communicate Player Data

- [ ] implement [[file:client/lib/arena/arena.dart::class Arena {][client socket module]] to the point that at the very beginning of the game we send a PlayRequest and receive a PlayingClient response including the Arena
 
*** Resources

- [[https://github.com/carlostse/nodejs-protobuf-socketio][socket.io sample]]
- [[https://github.com/rikulo/socket.io-client-dart][dart socket.io client lib]]
- [[https://github.com/improbable-eng/ts-protoc-gen][ts-protoc-gen]]


