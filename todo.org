#+TITLE: batufo

* Building a 2D Multiplayer Game from Scratch in #Flutter

Hacking on a Multiplayer 2D #Flutter Game with a Node.js backend written in #TypeScript

* Networking

** [ ] Fix Problem after Game Started

- only affects player at index 0

#+BEGIN_SRC
The following RangeError was thrown during a scheduler callback:
RangeError (index): Invalid value: Not in range 0..285, inclusive: -2

When the exception was thrown, this was the stack:
#0      List.[] (dart:core-patch/array.dart:14:52)
#1      Colliders._wallAt (package:batufo/controllers/helpers/colliders.dart:52:42)
#2      Colliders.playerCollidingAt (package:batufo/controllers/helpers/colliders.dart:47:12)
#3      PlayerController._checkWallCollision (package:batufo/controllers/player_controller.dart:97:26)
#4      PlayerController.update (package:batufo/controllers/player_controller.dart:43:19)

#+END_SRC


** Server Relays Player Updates to other Players

 - [ ] players need to send updates to server
 - [ ] server needs to propagate them
 - [ ] cleints need to sync other players accordingly

** Server Relays Spawned Bullest to other Players

 - [ ] when player shoots bullet it updates server either as part of player update or separate event
 - [ ] server updates all clients with spawned bullet info

** DONE PlayerRequest -> PlayingClient Init [7/7]
:LOGBOOK:
CLOCK: [2020-05-22 Fri 18:35]--[2020-05-22 Fri 19:59] =>  1:24
CLOCK: [2020-05-21 Thu 19:50]--[2020-05-21 Thu 20:20] =>  0:30
CLOCK: [2020-05-21 Thu 18:37]--[2020-05-21 Thu 19:42] =>  1:05
:END:

- [X] send play request to server including desired level
- [X] port tilemap creation from dart to typescript
- [X] port arena creation from dart to typescript in order to build arena on the server
- [X] implement all arena related pack logic
- [X] implement two sample levels
- [X] server reponds with ids + arena
- [X] client prints out arena info

** DONE Init Client from Server Arena
:LOGBOOK:
CLOCK: [2020-05-25 Mon 18:47]--[2020-05-25 Mon 20:03] =>  1:16
:END:

- [X] client connects
- [X] client sends play request
- [X] server responds with playing client including arena
- [X] client renders arena with current player and is in a playable state

*** Resources

- [[https://github.com/carlostse/nodejs-protobuf-socketio][socket.io sample]]
- [[https://github.com/rikulo/socket.io-client-dart][dart socket.io client lib]]
- [[https://github.com/improbable-eng/ts-protoc-gen][ts-protoc-gen]]

** DONE Add Stream based State Management

*** Universe  [6/6]

Manages states and emits them so stream controllers can be used to render appropriate widgets.

- [X] Selecting Level State
- [X] Game Created State (shows waiting for players) includes arena with all players
- [X] Game Started State (subscribes to server updates) includes clientID
- [X] ~Client~ rpc class should have no state
- [X] server needs to send ~ServerInfo~
- [X] server needs to include client index in arena players

** DONE Socket.io Spike [0/0]
:LOGBOOK:
CLOCK: [2020-05-20 Wed 18:41]--[2020-05-20 Wed 19:42] =>  1:01
CLOCK: [2020-05-15 Fri 18:40]--[2020-05-15 Fri 20:17] =>  1:37
CLOCK: [2020-05-14 Thu 18:40]--[2020-05-14 Thu 20:20] =>  1:40
:END:

- [X] setup TS project
- [X] simple socket.io server in TypeScript
- [X] write commandline socket.io dart client
  - [X] [[*Try possible fixes][Try possible fixes]]
- [X] communicate between the two
- [X] find proto lib for JS/TS
- [X] write proto generator script
- [X] communicate proto messages and declare it impossible for now

*** Status

- communicating between server and client, but dart client is unable to deserialize message
- Node.js server + client class have static ~(de)serialize~ methods, but dart classes don't
- also data received is not a ~List~ either
- possibly include a string in the payload to understand data format better

** KILL Using JSON format
:LOGBOOK:
CLOCK: [2020-05-20 Wed 19:51]--[2020-05-20 Wed 20:11] =>  0:20
:END:

No longer necessary since we figured out how to work around the dart socket.io lib treating all incoming messages as JSON.
This allows us to use proto definitions and smaller /albeit not ideal/ payloads (due to the workaround).
  
- [X] ensure this works
- [ ] declare TypeScript payload types only for play request for now
- [ ] determine small format to send, most likely flat arrays
  
  
